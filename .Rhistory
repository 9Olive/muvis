packagedocs::use_travis()
Sys.setenv(GITHUB_PAT="87c053f1a99e67523506bf28007b005421229758")
packagedocs::use_travis()
devtools::document()
devtools::document()
packagedocs::use_travis()
devtools::document()
packagedocs::use_travis()
packagedocs::init_vignettes()
packagedocs::use_travis()
install.packages("softImpute")
#' importfrom(softimpute)
#' impute Cont columns using softimpute
#' importfrom(biScale)
#'
#'
#'
library(softImpute)
?softImpute
install.packages("readxl")
cbind(cont, desc)
if(scale){
cont <- biScale(cont)
}
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[,!which(is.cont)]
} else{
level <- apply(data, 2 , funtion(x) length(unique(x)))
cont <- which(level > 6)
desc <- which(level <= 6)
}
if (impute) {
softImpute(cont) -> cont
sonfImpute(desc) -> desc
}
if(scale){
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- which(level > 6)
desc <- which(level <= 6)
}
if (impute) {
softImpute(cont) -> cont
sonfImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
library(readxl)
data <- read_xls("/home/Downloads/D Mining Sample NA.xlsx")
data <- read_xls("/home/vahid/Downloads/D Mining Sample NA.xlsx")
data <- read_xlsx("/home/vahid/Downloads/dat.xlsx")
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
sonfImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
sonfImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
library(softImpute)
library(readxl)
data <- read_xlsx("/home/vahid/Downloads/dat.xlsx")
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
sonfImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
View(cont)
if (impute) {
softImpute(cont) -> cont
softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data[,1:10])
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data[,1:10])
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
softImpute(cont) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data[,1:10])
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
View(desc)
if (impute) {
softImpute(cont) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
View(desc)
if (impute) {
softImpute(cont) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
install.packages("ncimpute")
install.packages("ncimpute")
install.packages("ncImpute")
install.packages("/home/vahid/Downloads/ncImpute_1.0.tar.gz", lib="/your_R_packages_library", repos=NULL, type="source")
install.packages("/home/vahid/Downloads/ncImpute_1.0.tar.gz", repos=NULL, type="source")
install.packages("svd")
install.packages("/home/vahid/Downloads/ncImpute_1.0.tar.gz", repos=NULL, type="source")
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
View(desc)
if (impute) {
ncImpute(cont) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
library(ncImpute)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
ncImpute(cont) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
ncImpute(cont, rank=100, lambda = 30) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
data.preprocess(data)
devtools::document()
devtools::document()
devtools::document()
packagedocs::init_vignettes()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
devtools::load_all()
devtools::document()
devtools::create()
devtools::document()
devtools::load_all()
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
data.preprocess <- function(data,
impute = T,
scale = T,
is.cont = NULL) {
data <- data.matrix(data)
## to do size of is.cont compatible with dim(data)[2]
if (length(is.cont) != 0) {
cont <- data[, which(is.cont)]
desc <- data[, !which(is.cont)]
} else{
level <- apply(data, 2 , function(x) length(unique(x)))
cont <- data[,which(level > 6)]
desc <- data[,which(level <= 6)]
}
if (impute) {
ncImpute(cont, rank=100, lambda = 30) -> cont
# softImpute(desc) -> desc
}
if (scale) {
cont <- biScale(cont)
}
cbind(cont, desc)
}
devtools::load_all()
